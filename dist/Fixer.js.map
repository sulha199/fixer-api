{"version":3,"file":"Fixer.js","sourceRoot":"","sources":["../src/Fixer.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,2CAA0C;AAC1C,6CAAgD;AAoEhD,MAAsB,KAAK;IAGzB,YAAY,OAA+B,EAAE;QAC3C,IAAI,CAAC,YAAY,GAAG;YAClB,OAAO,EAAE,IAAI,CAAC,OAAO,IAAI,uBAAW;YACpC,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC;IACJ,CAAC;IAED,GAAG,CAAC,EAAE,OAAO,EAAE,SAAS,KAA6B,EAAE;QACrD,IAAI,CAAC,YAAY,CAAC,OAAO,GAAG,OAAO,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;QACjE,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,SAAS,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC;QACvE,OAAO,IAAI,CAAC;IACd,CAAC;IAEK,OAAO,CAAC,IAAmB,EAAE,OAAiC,EAAE;;YACpE,OAAO,IAAI,CAAC,OAAO,CAAiB,IAAI,6BAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QAC1E,CAAC;KAAA;IAEK,MAAM,CAAC,OAAiC,EAAE;;YAC9C,OAAO,IAAI,CAAC,OAAO,CAAiB,SAAS,EAAE,IAAI,CAAC,CAAC;QACvD,CAAC;KAAA;IAEK,OAAO,CAAC,OAAiC,EAAE;;YAC/C,OAAO,IAAI,CAAC,OAAO,CAAuB,UAAU,EAAE,IAAI,CAAC,CAAC;QAC9D,CAAC;KAAA;IAEK,OAAO,CACX,IAAY,EACZ,EAAU,EACV,MAAc,EACd,IAAoB;;YAEpB,OAAO,IAAI,CAAC,OAAO,CAAwB,UAAU,EAAE;gBACrD,IAAI;gBACJ,EAAE;gBACF,MAAM;gBACN,IAAI;aACL,CAAC,CAAC;QACL,CAAC;KAAA;IAEK,UAAU,CACd,SAAwB,EACxB,OAAsB,EACtB,OAAiC,EAAE;;YAEnC,MAAM,KAAK,GAAG,6BAAgB,CAAC,SAAS,CAAC,CAAC;YAC1C,MAAM,GAAG,GAAG,6BAAgB,CAAC,OAAO,CAAC,CAAC;YACtC,OAAO,IAAI,CAAC,OAAO,CAA2B,aAAa,kBACzD,UAAU,EAAE,KAAK,EACjB,QAAQ,EAAE,GAAG,IACV,IAAI,EACP,CAAC;QACL,CAAC;KAAA;CAGF;AAzDD,sBAyDC","sourcesContent":["import { DEFAULT_URL } from './constants';\r\nimport { ensureDateString } from './formatDate';\r\n\r\nexport interface IFixerError {\r\n  readonly type: string;\r\n  readonly info: string;\r\n}\r\n\r\nexport interface IFixerRates {\r\n  readonly [currency: string]: number;\r\n}\r\n\r\nexport interface IFixerResponse {\r\n  readonly base: string;\r\n  readonly date: string;\r\n  readonly rates: IFixerRates;\r\n  readonly timestamp: number;\r\n  readonly error?: IFixerError;\r\n}\r\n\r\nexport interface IFixerSymbols {\r\n  readonly [symbol: string]: string;\r\n}\r\n\r\nexport interface IFixerSymbolResponse {\r\n  readonly symbols: IFixerSymbols;\r\n  readonly error?: IFixerError;\r\n}\r\n\r\nexport interface IFixerConvertRequestOptions {\r\n  readonly from: string;\r\n  readonly to: string;\r\n  readonly amount: number;\r\n  readonly date?: string;\r\n}\r\n\r\nexport interface IFixerConvertResponse {\r\n  readonly success: boolean;\r\n  readonly query: {\r\n    readonly from: string;\r\n    readonly to: string;\r\n    readonly amount: number;\r\n  };\r\n  readonly date: string;\r\n  readonly result: number;\r\n}\r\n\r\nexport interface IFixerTimeseriesResponse {\r\n  readonly success: boolean;\r\n  readonly start_date: string;\r\n  readonly end_date: string;\r\n  readonly base: string;\r\n  readonly rates: Record<string, Record<string, number>>;\r\n}\r\n\r\nexport interface IRawParams {\r\n  [key: string]: any;\r\n}\r\nexport interface IRequestOptions {\r\n  base?: string;\r\n  symbols?: string[];\r\n  access_key: string;\r\n}\r\n\r\nexport interface IBasicOptions {\r\n  baseUrl: string;\r\n  accessKey?: string;\r\n}\r\n\r\nexport abstract class Fixer {\r\n  protected basicOptions: IBasicOptions;\r\n\r\n  constructor(opts: Partial<IBasicOptions> = {}) {\r\n    this.basicOptions = {\r\n      baseUrl: opts.baseUrl || DEFAULT_URL,\r\n      accessKey: opts.accessKey\r\n    };\r\n  }\r\n\r\n  set({ baseUrl, accessKey }: Partial<IBasicOptions> = {}): Fixer {\r\n    this.basicOptions.baseUrl = baseUrl || this.basicOptions.baseUrl;\r\n    this.basicOptions.accessKey = accessKey || this.basicOptions.accessKey;\r\n    return this;\r\n  }\r\n\r\n  async forDate(date: Date | string, opts: Partial<IRequestOptions> = {}): Promise<IFixerResponse> {\r\n    return this.request<IFixerResponse>(`/${ensureDateString(date)}`, opts);\r\n  }\r\n\r\n  async latest(opts: Partial<IRequestOptions> = {}): Promise<IFixerResponse> {\r\n    return this.request<IFixerResponse>('/latest', opts);\r\n  }\r\n\r\n  async symbols(opts: Partial<IRequestOptions> = {}): Promise<IFixerSymbolResponse> {\r\n    return this.request<IFixerSymbolResponse>('/symbols', opts);\r\n  }\r\n\r\n  async convert(\r\n    from: string,\r\n    to: string,\r\n    amount: number,\r\n    date?: Date | string\r\n  ): Promise<IFixerConvertResponse> {\r\n    return this.request<IFixerConvertResponse>('/convert', {\r\n      from,\r\n      to,\r\n      amount,\r\n      date\r\n    });\r\n  }\r\n\r\n  async timeseries(\r\n    startDate: Date | string,\r\n    endDate: Date | string,\r\n    opts: Partial<IRequestOptions> = {}\r\n  ) {\r\n    const start = ensureDateString(startDate);\r\n    const end = ensureDateString(endDate);\r\n    return this.request<IFixerTimeseriesResponse>('/timeseries', {\r\n      start_date: start,\r\n      end_date: end,\r\n      ...opts\r\n    });\r\n  }\r\n\r\n  protected abstract request<Result>(url: string, opts: IRawParams): Promise<Result>;\r\n}\r\n"]}